## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file lecture_notes.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_208 = Integer(208); _sage_const_29 = Integer(29); _sage_const_25 = Integer(25); _sage_const_136 = Integer(136); _sage_const_63 = Integer(63); _sage_const_138 = Integer(138); _sage_const_68 = Integer(68); _sage_const_8 = Integer(8); _sage_const_214 = Integer(214); _sage_const_217 = Integer(217); _sage_const_13 = Integer(13); _sage_const_11 = Integer(11); _sage_const_89 = Integer(89); _sage_const_74 = Integer(74); _sage_const_99 = Integer(99); _sage_const_121 = Integer(121); _sage_const_127 = Integer(127); _sage_const_124 = Integer(124); _sage_const_94 = Integer(94)## This file (lecture_notes.sagetex.sage) was *autogenerated* from lecture_notes.tex with sagetex.sty version 2019/01/09 v3.3.
import sagetex
_st_ = sagetex.SageTeXProcessor('lecture_notes', version='2019/01/09 v3.3', version_check=True)
try:
 _st_.current_tex_line = _sage_const_11 
 _st_.doctest(_sage_const_0 , r"""
    sage: type(ZZ)
  
""", globals(), locals(), False)
except:
 _st_.goboom(_sage_const_13 )
try:
 _st_.current_tex_line = _sage_const_25 
 _st_.doctest(_sage_const_1 , r"""
    sage: a,b = ZZ(4), 4
    sage: type(a) == type(b)
    sage: a == b
  
""", globals(), locals(), False)
except:
 _st_.goboom(_sage_const_29 )
try:
 _st_.current_tex_line = _sage_const_63 
 _st_.doctest(_sage_const_2 , r"""
    sage: 2/3
    sage: type(2/3)
    sage: 1/1
    sage: type(1/1)
  
""", globals(), locals(), False)
except:
 _st_.goboom(_sage_const_68 )
try:
 _st_.current_tex_line = _sage_const_89 
 _st_.doctest(_sage_const_3 , r"""
    sage: def divides0(a,b):
    ....:     return (a/b).is_integer()
    sage: divides0(5,2)
    sage: divides0(6,3)
  
""", globals(), locals(), False)
except:
 _st_.goboom(_sage_const_94 )
try:
 _st_.current_tex_line = _sage_const_121 
 _st_.doctest(_sage_const_4 , r"""
    sage: k = 15
    ....: P = Poset((Set([2..k]), lambda a,b: b % a == 0))
  
""", globals(), locals(), False)
except:
 _st_.goboom(_sage_const_124 )
try:
 _st_.current_tex_line = _sage_const_127 
 _st_.plot(_sage_const_0 , format='png', _p_=P.plot(talk=True))
except:
 _st_.goboom(_sage_const_127 )
try:
 _st_.current_tex_line = _sage_const_136 
 _st_.doctest(_sage_const_5 , r"""
    sage: len(P.cover_relations_graph().edges())
  
""", globals(), locals(), False)
except:
 _st_.goboom(_sage_const_138 )
try:
 _st_.current_tex_line = _sage_const_208 
 _st_.doctest(_sage_const_6 , r"""
    sage: P1 = plot(x/log(x), (2, 200), scale='semilogy', \
    ....:     fill=lambda x: prime_pi(x),fillcolor='red')
    ....: P2 = plot(1.13*log(x), (2, 200), \
    ....:     fill=lambda x: nth_prime(x)/floor(x), fillcolor='red')
    ....: P = graphics_array([P1, P2])
  
""", globals(), locals(), False)
except:
 _st_.goboom(_sage_const_214 )
try:
 _st_.current_tex_line = _sage_const_217 
 _st_.plot(_sage_const_1 , format='notprovided', _p_=P,figsize=[_sage_const_8 ,_sage_const_4 ])
except:
 _st_.goboom(_sage_const_217 )
try:
 _st_.current_tex_line = _sage_const_74 
 _st_.doctest(_sage_const_7 , r"""
          sage: def divides0(a,b):
          ....:     return (a/b).is_integer()
          sage: def divides1(a,b):
          ....:     return a % b == 0
          sage: def divides2(a,b):
          ....:     return (a//b)*b == a
          sage: def divides3(a,b):
          ....:     return (a/b).denom() == 1
          sage: def divides4(a,b): #there is room to improve
          ....:     if a == 0:
          ....:         return True
          ....:     b *= sign(b)
          ....:     if b == 1:
          ....:         return True
          ....:     q = b
          ....:     a *= sign(a)
          ....:     while q <= a:
          ....:         q <<= 1
          ....:     while a > b:
          ....:         q >>= 1
          ....:         a -= q
          ....:         a *= sign(a)
          ....:     return a == 0 or a == b

          
""", globals(), locals(), False)
except:
 _st_.goboom(_sage_const_99 )
_st_.endofdoc()

