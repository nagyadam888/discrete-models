r"""
This file was *autogenerated* from lecture_notes.tex with sagetex.sty
version 2019/11/14 v3.4. It contains the contents of all the
sageexample environments from lecture_notes.tex. You should be able to
doctest this file with "sage -t lecture_notes_doctest.sage".

It is always safe to delete this file; it is not used in typesetting your
document.

Sage example, line 11::

    sage: type(ZZ)
  

Sage example, line 25::

    sage: a,b = ZZ(4), 4
    sage: type(a) == type(b)
    sage: a == b
  

Sage example, line 63::

    sage: 2/3
    sage: type(2/3)
    sage: 1/1
    sage: type(1/1)
  

Sage example, line 21::

    sage: def divides0(a,b):
    ....:     return (a/b).is_integer()
    sage: divides0(5,2)
    sage: divides0(6,3)
  

Sage example, line 103::

  sage: k = 15
  ....: P = Poset((Set([2..k]), lambda a,b: b % a == 0))

Sage example, line 124::

    sage: len(P.cover_relations_graph().edges())
  

Sage example, line 233::

  sage: P1 = plot(x/log(x), (2, 200), scale='semilogy', \
  ....:     fill=lambda x: prime_pi(x),fillcolor='red')
  ....: P2 = plot(1.13*log(x), (2, 200), \
  ....:     fill=lambda x: nth_prime(x)/floor(x), fillcolor='red')
  ....: P = graphics_array([P1, P2])

Sage example, line 94::

  sage: def make_code_tree(C):
  ....:     G = DiGraph()
  ....:     for c in C:
  ....:         prev = ''
  ....:         for i in range(1,len(c)+1):
  ....:             G.add_edge(prev, c[0:i], c[i-1])
  ....:             prev = c[0:i]
  ....:     return G
  sage: C = {'1011', '1100', '0110', '1110', '1010', '0101', '101'}
  sage: G = make_code_tree(C)
  sage: d = {'#00FF00': [v for v in G.vertices() if v not in C],
  ....:      '#FF0000': list(C)}
  ....: GP = G.plot(layout='tree', vertex_size=2000,
  ....:             vertex_color=d, edge_labels=True)

Sage example, line 225::

  sage: abc = ['A', 'B', 'C', 'D', 'E']
  ....: num = [ 16,   8,   7,   6,   3]
  ....: s = sum(num)
  ....: P = [(k/s).n(digits=3) for k in num]

Sage example, line 241::

  sage: ell = [ceil(-log(p, 2)) for p in P]
  ....: sc = [(floor(sum(P[0:i]) << ell[i])).binary().rjust(ell[i],'0')
  ....:       for i in range(len(abc))]

Sage example, line 258::

  sage: G = DiGraph()
  ....: maxdepth = 4
  ....: fc = ['' for a in abc]
  ....: def split(u, v, parent, depth, code):
  ....:     if maxdepth <= depth:
  ....:         return
  ....:     if u >= v:
  ....:         fc[u] = code;
  ....:         return
  ....:     i, j = u, v
  ....:     rp, lp = P[i], P[j]
  ....:     rc, lc = abc[i], abc[j]
  ....:     while i+1 < j:
  ....:         if rp < lp:
  ....:             i += 1
  ....:             rp, rc = rp+P[i], rc+abc[i]
  ....:         else:
  ....:             j -= 1
  ....:             lp, lc = lp+P[j], lc+abc[j]
  ....:     rc, lc = rc + '\n' + str(rp), lc + '\n' + str(lp)
  ....:     split(u, i, rc, depth+1, code+'0')
  ....:     G.add_edge(parent, rc, '0')
  ....:     split(j, v, lc, depth+1, code+'1')
  ....:     G.add_edge(parent, lc, '1')

Sage example, line 291::

  sage: maxdepth=1
  ....: G = DiGraph()
  ....: split(0, len(abc)-1, '', 0, '')
  ....: GP = G.plot(layout='tree', edge_labels=True,
  ....:             vertex_size=4000, figsize=3, vertex_color='white')

Sage example, line 310::

  sage: maxdepth=2
  ....: G = DiGraph()
  ....: split(0, len(abc)-1, '', 0, '')
  ....: GP = G.plot(layout='tree', edge_labels=True,
  ....:             vertex_size=4000, figsize=5, vertex_color='white')

Sage example, line 328::

  sage: maxdepth=4
  ....: G = DiGraph()
  ....: split(0, len(abc)-1, '', 0, '')
  ....: GP = G.plot(layout='tree', edge_labels=True,
  ....:             vertex_size=4000, figsize=7, vertex_color='white')

Sage example, line 83::

          sage: def divides0(a,b):
          ....:     return (a/b).is_integer()
          sage: def divides1(a,b):
          ....:     return a % b == 0
          sage: def divides2(a,b):
          ....:     return (a//b)*b == a
          sage: def divides3(a,b):
          ....:     return (a/b).denom() == 1
          sage: def divides4(a,b): #there is room to improve
          ....:     if a == 0:
          ....:         return True
          ....:     b *= sign(b)
          ....:     if b == 1:
          ....:         return True
          ....:     q = b
          ....:     a *= sign(a)
          ....:     while q <= a:
          ....:         q <<= 1
          ....:     while a > b:
          ....:         q >>= 1
          ....:         a -= q
          ....:         a *= sign(a)
          ....:     return a == 0 or a == b

      

"""
